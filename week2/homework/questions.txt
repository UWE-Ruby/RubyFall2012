Please Read The Chapters on: 
Containers, Blocks, and Iterators 
Sharing Functionality: Inheritance, Modules, and Mixins

1. What is the difference between a Hash and an Array?
# An array is an ordered list of items that are referenced by their index (order), a hash is a collection of items that can be referenced by a key and have no order.
A hash is a collection of key-value pairs where an array is an indexed collection of an object (starting with 0)

2. When would you use an Array over a Hash and vice versa?
# When the items have an inherent order I would use an array, when I want to reference the items in my collection by a name or key and their order does not matter I would use a hash.
You would use an array to store a list of values where you would store associated data in a hash

3. What is a module? Enumerable is a built in Ruby module, what is it?
# A module is a way to group code that you can use across multiple classes. Enumerable is a Ruby module that provides collection functionality; iteration, searching, and sorting. It requires an implementation of the each method.
Enumerable is a module of specific actions that can be run against variables, arrays, hashes, etc.
A module is a collection of methods and constants and is similar to a class except it has no instances. The enumerable module is a bunch of methods that work with collections.

4. Can you inherit more than one thing in Ruby? How could you get around this problem?
# No, multiple inheritance is not allowed in Ruby. You can include multiple modules if you wanted to mix-in different functionality into your code. Code that is related with a hierarchical nature should be subclassed (inherited). A class can only have 1 direct parent, but can have lots of ancestors.
No, but mixins can be used to provide "multiple-inheritance-like" functionality

5. What is the difference between a Module and a Class?
# A class can be instantiated into an object, a module cannot. A module is code that can be used across many classes.
# a module is a collection of behavior that can be shared in other files
Modules allows methods to be written that can be used across multiple classes but can not be inherited or generate instances.
Classes may generate instances (objects), and have per-instance state (instance variables), and may inherit from another class, but not from a module.
