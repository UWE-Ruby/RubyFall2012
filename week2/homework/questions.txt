Please Read The Chapters on: 
Containers, Blocks, and Iterators 
Sharing Functionality: Inheritance, Modules, and Mixins

1. What is the difference between a Hash and an Array?
    They are very similar, in that they are both collections of objects, but an array can only be indexed
    by an integer, while a hash can be indexed by any object (similar to an associative array in other languages,
    but even more flexible - the key is not limited to just strings).
    
2. When would you use an Array over a Hash and vice versa?
    An array is very useful for building queues, as it logically lends itself well to working with ordering
    and numbered positions within a collection.  There is an obvious relationship between the index and
    the logic of the situation.  However, the flexibility of indexing in a has allows you to be more descriptive
    or complex in your implementation of the collection - you can use a simple string to name values, or
    go more complex and use an object as the key (although this might require implementing your own methods
    for testing equality.)
    
3. What is a module? Enumerable is a built in Ruby module, what is it?
    A module is a collection of functionality under a common namespace. It is similar in concept to defining
    some methods within a file, and including that file within another script, but with the added benefit
    of preventing name collisions between different methods, which could easily occur with the file
    inclusion method.
    
    Enumerable is, as stated, a module.  It is used as a mixin for any collection class to provide it with
    traversal and sorting functionality, given the host class provides implementations of a couple of basic sorting
    and comparison methods. (e.g., the <=> method)
    
4. Can you inherit more than one thing in Ruby? How could you get around this problem?
    Ruby does not support multiple inheritance - however, if you require centralized functionality to be shared
    between different classes, you can define it inside a module, and include that module within the different
    classes (which is called a mixin).

5. What is the difference between a Module and a Class?
    A class can be instantiated, while a module cannot.  They are both good ways of collecting reusable
    logic, but a class is best suited to representing some sort of logical object (serving as a blueprint),
    whereas a module can be seen as a sort of library - simply a collection of functionality that can be included
    where it is needed (and provide the benefits of multiple inheritance, without the downsides!)