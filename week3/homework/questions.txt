Please Read: 
 - Chapter 6 Standard Types
 - Review Blocks
 - Chapter 7 Regular Expressions
 - Chapter 22 The Ruby Language: basic types (symbols), variables and constants

1. What is a symbol?
<<<<<<< HEAD
"an identifier corresponding to a string of characters, often a name"

2. What is the difference between a symbol and a string?
A symbol is identified with a preceding colon rather than quotation marks for strings. Symbols are better when you want to create a  single word/name value that isn't arbitrary as opposed to a string variable that could have multiple values.

3. What is a block and how do I call a block?
Code that is enclosed by braces or "do" and "end". It is different from a method in that it is anonymous as opposed to being named/defined.

4. How do I pass a block to a method? 
Write the block immediately after invocation of a method

What is the method signature?
The components of a method that include the name of the method and applicable parameters; this lets you know how to call a method and helps the interpreter/compiler/parser/etc. know the difference between one method versus another. 

5. Where would you use regular expressions?
Everywhere! Particularly when trying to find text or assign text to variables.
=======
A symbol is a static name or identifier.

2. What is the difference between a symbol and a string?
A string is a collection of characters whereas a string is a static identifier. A string is not static no matter what the contents of the string are. So the strings "hello" and "hello" are two different ojects, whereas the symbol :hello and :hello are the exact same object. If you think of 1 as a FixNum or fixed number, you can think of the symbol :hello as the "FixStr" or fixed string :hello.

3. What is a block and how do I call a block?
A block is an anonymous function, or some code snipt that you can define and then call at a later time. To call a block you can use the yield keyword.

4. How do I pass a block to a method? What is the method signature?
To pass a block to a method you define the block after the method call with either the curly bracket enclosure {} or the do/end syntax. An example of passing a block to the each method of an array:

my_array.each {|a| puts a}

Any method in Ruby can take a block. You can explicitly add a block to a method by putting an ampersand & before the variable name in the method definition. An example of this would be:

def my_method(&my_block)
	my_block.call
end

5. Where would you use regular expressions?
Regular expressions are used for pattern matching and replacement with strings. An example would be if I wanted to write a syntax checker for some text that checked if each sentance ended with a period, started with a space and then a capital letter. 
>>>>>>> 15e2934dd67bd9a431f1e6ce9ad8fc2e50446bbb
