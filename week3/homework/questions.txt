Please Read: 
 - Chapter 6 Standard Types
 - Review Blocks
 - Chapter 7 Regular Expressions
 - Chapter 22 The Ruby Language: basic types (symbols), variables and constants

1. What is a symbol?
<<<<<<< HEAD
A constant that is garunteed to be unique and that does not need to be predeclared.

2. What is the difference between a symbol and a string?
Strings are a sequence of characters whereas symbols represent and point to another object. Stings can be binary objects. Strings can be duplicated, but symbols will always be unique.

3. What is a block and how do I call a block?
A block is a chunk of code between either braces or the keywords do and end.
Calling a block only occurs after a method is called.

4. How do I pass a block to a method? What is the method signature?
Pass a block to a method with do |value| end. The method signature is the method name.

5. Where would you use regular expressions?
You would most likely use a regular expression in searching for data or matches or to manipulate data to extract items that match a pattern or change items that match a pattern.
=======
A symbol is a static name or identifier.

2. What is the difference between a symbol and a string?
A string is a collection of characters whereas a string is a static identifier. A string is not static no matter what the contents of the string are. So the strings "hello" and "hello" are two different ojects, whereas the symbol :hello and :hello are the exact same object. If you think of 1 as a FixNum or fixed number, you can think of the symbol :hello as the "FixStr" or fixed string :hello.

3. What is a block and how do I call a block?
A block is an anonymous function, or some code snipt that you can define and then call at a later time. To call a block you can use the yield keyword.

4. How do I pass a block to a method? What is the method signature?
To pass a block to a method you define the block after the method call with either the curly bracket enclosure {} or the do/end syntax. An example of passing a block to the each method of an array:
>>>>>>> f7e675fa7a88f9cdfc4b342f33e2567d897b5075

my_array.each {|a| puts a}

Any method in Ruby can take a block. You can explicitly add a block to a method by putting an ampersand & before the variable name in the method definition. An example of this would be:

def my_method(&my_block)
	my_block.call
end

5. Where would you use regular expressions?
Regular expressions are used for pattern matching and replacement with strings. An example would be if I wanted to write a syntax checker for some text that checked if each sentance ended with a period, started with a space and then a capital letter. 
